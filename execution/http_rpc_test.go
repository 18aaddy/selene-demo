package execution

import (
	"encoding/json"
	"fmt"
	"math/big"
	"testing"

	seleneCommon "github.com/BlocSoc-iitr/selene/common"
	"github.com/BlocSoc-iitr/selene/utils"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/holiman/uint256"
	"github.com/stretchr/testify/assert"
)

func MakeNewRpc(t *testing.T) ExecutionRpc {
	rpcUrl := "https://eth-mainnet.g.alchemy.com/v2/j28GcevSYukh-GvSeBOYcwHOfIggF1Gt"

	var httpRpc ExecutionRpc
	httpRpc, err := (&HttpRpc{}).New(&rpcUrl)

	if err != nil {
		t.Errorf("Error in creating new rpc: %v", err)
	}

	return httpRpc
}

func TestGetProof(t *testing.T) {
	rpc := MakeNewRpc(t)

	addressBytes, err := utils.Hex_str_to_bytes("0xB856af30B938B6f52e5BfF365675F358CD52F91B")
	if err != nil {
		t.Errorf("Error in decoding address string:, %v", err)
	}

	var address seleneCommon.Address = seleneCommon.Address{Addr: [20]byte(addressBytes)}
	slots := []common.Hash{}
	var block uint64 = 14900001

	proof, err := rpc.GetProof(&address, &slots, block)
	// fmt.Printf("Proof: %v", proof)
	if err != nil {
		t.Errorf("Error in fetching proof: %v", err)
	}

	var accountProof EIP1186ProofResponse
	proofString := `{
    "address": "0xb856af30b938b6f52e5bff365675f358cd52f91b",
    "accountProof": [
      "0xf90211a021162657aa1e0af5eef47130ffc3362cb675ebbccfc99ee38ef9196144623507a073dec98f4943e2ab00f5751c23db67b65009bb3cb178d33f5aa93f0c08d583dda0d85b4e33773aaab742db880f8b64ea71f348c6eccb0a56854571bbd3db267f24a0bdcca489de03a49f109c1a2e7d3bd4e644d72de38b7b26dca2f8d3f112110c6fa05c7e8fdff6de07c4cb9ca6bea487a6e5be04af538c25480ce30761901b17e4bfa0d9891f4870e745509cfe17a31568f870b367a36329c892f1b2a37bf59e547183a0af08f747d2ea66efa5bcd03729a95f56297ef9b1e8533ac0d3c7546ebefd2418a0a107595919d4b102afaa0d9b91d9f554f83f0ad61a1e04487e5091543eb81db8a0a0725da6da3b62f88fc573a3fd0dd9dea9cba1750786021da836fd95b7295636a0fd7a768700af3caadaf52a08a23ab0b71ca52830f2b88b1a6b23a52f9ee05507a059434ae837706d7d317e4f7d03cd91f94ed0465fa8b99eaf18ca363bb318c7b3a09e9b831a5f59b781efd5dae8bea30bfd81b9fd5ea231d6b7e82da495c95dd35da0e72d02a01ed9bc928d94cad59ae0695f45120b7fbdbce43a2239a7e5bc81f731a0184bfb9a4051cbaa79917183d004c8d574d7ed5becaf9614c650ed40e8d123d9a0fa4797dc4a35af07f1cd6955318e3ff59578d4df32fd2174ed35f6c4db3471f9a0fec098d1fee8e975b5e78e19003699cf7cd746f47d03692d8e11c5fd58ba92a680",
      "0xf90211a07fc5351578eb6ab7618a31e18c87b2b8b2703c682f2d4c1d01aaa8b53343036ea0e8871ae1828c54b9c9bbf7530890a2fe4e160fb62f72c740c7e79a756e07dbf3a04dd116a7d37146cd0ec730172fa97e84b1f13e687d56118e2d666a02a31a629fa08949d66b81ba98e5ca453ba1faf95c8476873d4c32ff6c9a2558b772c51c5768a028db2de6d80f3a06861d3acc082e3a6bb4a6948980a8e5527bd354a2da037779a09b01ba0fe0193c511161448c602bb9fff88b87ab0ded3255606a15f8bca9d348a0c1c1c6a89f2fdbee0840ff309b5cecd9764b5b5815b385576e75e235d1f04656a04e827215bb9511b3a288e33bb418132940a4d42d589b8db0f796ec917e8f9373a099398993d1d6fdd15d6082be370e4d2cc5d9870923d22770aaec9418f4b675d7a00cd1db5e131341b472af1bdf9a1bf1f1ca82bc5b280c8a50a20bcfff1ab0bdd4a09bbcc86c94be1aabf5c5ceced29f462f59103aa6dafe0fc60172bb2c549a8dbaa0902df0ba9eed7e8a6ebff2d06de8bcec5785bb98cba7606f7f40648408157ef4a0ba9dfd07c453e54504d41b7a44ea42e8220767d1e2a0e6e91ae8d5677ac70e50a0f02f2a5e26d7848f0e5a07de68cbbbd24253d545afb74aac81b35a70b6323f1ca0218b955deca7177f8f58c2da188611b333e5c7ef9212000f64ca92cd5bb6e5a0a049cd750f59e2d6f411d7b611b21b17c8eefe637ca01e1566c53f412308b34c6280",
      "0xf90211a05303302919681c3ad0a56c607c9530ed910f44515f6b40c9633d1900bbbc7e0fa0459fc49e57f39ca6471b1c6905ede7eaa6d7186c8249485cc28338ba18c540cba0825307726d1b7c9d74973d37c12e8b035bf0334836e48ec3f2ff18bf2232dabea0a67ef68daba820c7d6343d1b147b73430ce5c5915a27581cfd12946c2307dc49a003c9b0f0b784de7d72f3b5d5fea87e30dc5fc6f93a0c218240f79a2c74b0f8e2a05a38ddf70df168305b8ba38e8ee54dfadc3f7d81335ec849cb143a10d9738a91a058f0692b5cb07a1c8c800fcf8a70c6e6189a5d72f24ca0040423cf450df1da44a0890dbc62e7429fcca3f1507ad2cd4799c0a7aab25db37ccad434ae23ae889807a075be60d2f635292e69dbc600600605cb8eaf75e96425fd3f2347a5c644db43b9a07b65ba06ee9d2b5dab0a9acc1b8b521cb42f91566de9c174636e817c3d990265a0de65bc6092e28b0cc1ed454fcc07ce26df21bb05efe0a4b4472ff63278e28b95a08077cd7de83428d376ff7588b32df903d2764af7d41deb9c873e9ae889823cd3a0af2f63837dc01e2efb9e40815761015a0d740c2d2549593eefd291a05d40b55aa0c3214baa8d347bd5703926b6fe3ee2f607d0debc0fd73352696dc10f4cbc517da01756cf85b4785bda4a9867a453f8ca1948f015bd329b84083f14d313bddafb80a00dac89194bc1f28d3971b9ca9d1e16a49c6383557187d7bbeb899626d60bfb1980",
      "0xf90211a0bf50b49fae6cfe8b7671e3fa0c163aed76f6457720a2b7c18f567b3c02194c29a070dc71bb7e399e5ae66958261108c84b75e8aacc8d255ce28cd7c9029358872ba0d2ae86d376e65eee52338ad4a1951deb9312f2c161fdf5cfc3e36d5a07ee4239a0f2029dea5033d0e788191ba25fc25bb0570bdbbaf321dfdb076f6695c649a07ca066074b59980560ecdd8ebc96eeb93f50dc1e92983659ea4a6a61a4cff0f474cba01ad85159ddc98609ea628cd17897fe08b0d9a7bb07a2087d92a673e063039aaba04921580f8766f8f156546abd8f0e44af250b34e7323f35c40fdc078223822344a034e07b24a1c17f5dcff27b766099c206fbbb6e549d3f4c02fd8db0241061482aa0c852267182c35e2e5014ab6d656672e9446aaf79c6248d103870d55ee36368b1a00aed203f7e2684942a64f05306e57d64fd44eded94e2ce95e462be93adff640da02cea88d74264c91c546de3822b6169a427559781a774511409864d70a834706ea01d542f8a9b69674e58a5bb89fafb5e79cbe3607732455b09c2a996df48e48837a04c3bbb4f47041018455347567a4e3af472fafe179871f667c3d26038f5dabacfa03c4f12f7cdd35126ce5452aa8322bc8b497eb06c5c41741b590d40645a8fd14ea01334e9a4160b44b622e9523cb587d8ba4795bbf9ad3dd0aa1a2b7f5c6a5cbe94a08feae3d50602063d65763185633aa6e23bb47eca9a39982a4863a7cc6d3586ff80",
      "0xf90211a03fc22103871f30d114942583d24adfab1ce2e651ff6705a05964318fde7c425aa01c86fd2e9d2a823db33bf4089ce1af41332b4e3069b31bb70a67861944d71688a08a90ae88b4479d21135517195f50df20fc29dbe495e09440b0fa5797fc0352c8a02a195c4a89ab6322d8daa221124274d711a9435587406addfb289f9360c0b1caa02f7ed0113a1b72febc7ceb7d9193baeaa093aebea76eea4729821f53d29b302ea07d5cbbeffd22fb0f9d510576cac47a604b2121ef8b08588eaefc46a07844515ca01c0c09d203e342fab9f80835f3aa7bb7e94cbf94d3a18b21ce905e75b690673fa07c310f931f12d1651dbb9bdffbe5e0a16db981dccfb3f4a838592e2347b1b187a091b24e00d37034ed70e0c6653f8616363efbea43be86d52aabf6a9c5d5049d3aa017cc8ab2e63508691dee64ddb2dbe5352fe531f55728368cab3d8634450730dca0d8ee92d688eabcdf28af1830d7217fcd1431c0b0e3311039c422c5f45f9d525da0abe4323ef90fb783ffd6bf29d240818b0a2477d2ad4577fce57642a5ba476957a0eee3fbc510b1a6d8da176b9eab2035837769988b216fcef67f6a215e5e261d5ea082bc27591d8b0408739712c2f0e623e3d296d12afd6b7356dae237a315a6ce3ba0634affb8f9744fed774851772cb5ce495c50212961a64262d915632c2bede721a0345017d846f3be29dca1f56a734886c26cb49d3bcbbae5f7356e55e71d84147d80",
      "0xf90211a0a152d08043b3865248d8ae9c4594d6e09079f61ee4ad9afca98d3befb3a9307ca01313ea4df7ec991f5ba1b2175408765ea67111857ae25cafe21986810d633353a05cb00f30a4b6749cb8d01dda2ad665a2c570b7c6959b364c46da75fc2aebfa14a0a493d42fa40d6c8fb23090f20cebe9f1cde8a47d9594e666096c3f76219cfb34a06d2149e05ba1a31bcc352fd3a79fd42d95383f14a312862fa5f4b7b7bdb63254a0f40094679bf0599fdeecae8c800a423ad2499b67f9546d4085d5b7a351561072a05036fc625ed5a13d143fd0984e99969d2d48f962baec80b3f0e78323c8e864ffa0c0887db54ab0d4309ed5f563448bfc78a4a88c3a5473fcbd9bd263c8fcca4b9fa04287b193a315cba13a49482b4d83c068cf08b622593111e416b7a3b815e3595aa051b82224b54dc4050703157cdd6c74c618872c798badce7192fe1fd534814d5da017ac02273956b25dc2429750156e0a45bf461437bec84b784d19a5b964dd6882a05be9c25f80a6f34e9eb526d6c3c89e3ec2c5dd769d2d915d835208cac3f56d36a0ea7ae8e74baeae9d6307371f85cce46ba7ad46b5c2b3616a3573a26e1260bc31a04446678b6bf75075ae0261c179d88e49fae1d9482c214ec8c693239b583a6b18a09ec91d47f671c343cea224def0afcd62a57a408ac0e36b79cf29a4495ff9055ca0c3da71d14030daf8fb9157ec84f077df97dff395c1fcf8f04361e02aa1af36ff80",
      "0xf8b1808080a038f5e1b2680d95eaf7f225b996fc482f60cabcebeae26f883a4b58e1e9c7bbeda0c220c5d76d85ad38d8f82d0d6d6f48db3c23ae3657d1ac3ca6e2d98b4e48bfde8080a06fe32c7c1f8f80ebe5128f11a7af3a5bc47dbc6ac0af705069532b1cbefd6792a0015eb7d24835c910fc5f906627968a1a9e810cb164afd634ca683b6bb34f0241808080808080a03ca1d0ead152d38c16bda91dac49e3f0c9a0afeaa67598c1fce2506f5f03162680",
      "0xf86d9d3c3738deb88e49108e7a5bd83c14ad65b5ba598e2932551dc9b9ad1879b84df84b10874ef05b2fe9d8c8a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
    ],
    "balance": "0x4ef05b2fe9d8c8",
    "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
    "nonce": "0x10",
    "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
    "storageProof": []
  }`
	json.Unmarshal([]byte(proofString), &accountProof)
	assert.Equal(t, accountProof, proof, "Proof didn't match expected value")
}

func TestCreateAccessList(t *testing.T) {
	rpc := MakeNewRpc(t)

	fromAddress := common.HexToAddress("0x8885d8FFefb29AC94FCe584014266A6fE8437356")
	toAddress := common.HexToAddress("0xb5C3dd56b4Dc6108b21b0Dac4A20898A464b8c41")
	inputData := common.Hex2Bytes("0x")
	// data, err := utils.Hex_str_to_bytes("0x608060806080608155")

	opts := CallOpts{
		From: &fromAddress,
		To:   &toAddress,
		Data: inputData,
	}
	block := seleneCommon.BlockTag{
		Finalized: true,
		Number:    20985649,
	}

	accessList, err := rpc.CreateAccessList(opts, block)
	fmt.Println("Access list:", accessList)
	assert.NoError(t, err, "Found Error")

}

func TestGetCode(t *testing.T) {
	rpc := MakeNewRpc(t)

	addressBytes, err := utils.Hex_str_to_bytes("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2")
	if err != nil {
		t.Errorf("Error in decoding address string:, %v", err)
	}

	var address seleneCommon.Address = seleneCommon.Address{Addr: [20]byte(addressBytes)}
	blockNumber := 20983632

	code, err := rpc.GetCode(&address, uint64(blockNumber))

	codeString := "0x6060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b9578063095ea7b31461014757806318160ddd146101a157806323b872dd146101ca5780632e1a7d4d14610243578063313ce5671461026657806370a082311461029557806395d89b41146102e2578063a9059cbb14610370578063d0e30db0146103ca578063dd62ed3e146103d4575b6100b7610440565b005b34156100c457600080fd5b6100cc6104dd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010c5780820151818401526020810190506100f1565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610187600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061057b565b604051808215151515815260200191505060405180910390f35b34156101ac57600080fd5b6101b461066d565b6040518082815260200191505060405180910390f35b34156101d557600080fd5b610229600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061068c565b604051808215151515815260200191505060405180910390f35b341561024e57600080fd5b61026460048080359060200190919050506109d9565b005b341561027157600080fd5b610279610b05565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a057600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b18565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b6102f5610b30565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033557808201518184015260208101905061031a565b50505050905090810190601f1680156103625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bce565b604051808215151515815260200191505060405180910390f35b6103d2610440565b005b34156103df57600080fd5b61042a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be3565b6040518082815260200191505060405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106dc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156107b457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156108cf5781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084457600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2757600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ab457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b600260009054906101000a900460ff1681565b60036020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bdb33848461068c565b905092915050565b60046020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820deb4c2ccab3c2fdca32ab3f46728389c2fe2c165d5fafa07661e4e004f6c344a0029"
	codeBytes, err := utils.Hex_str_to_bytes(codeString)

	// fmt.Println("Code:", code)
	assert.NoError(t, err, "Found Error")
	assert.Equal(t, codeBytes, code, "Code didn't match expected value")
}

// ** Not possible to test as to send actual transaction, ETH is needed on mainnet
// func TestSendRawTransaction(t *testing.T) {
// 	rpc := MakeNewRpc(t)
// 	data, _ := utils.Hex_str_to_bytes("0x02f9332b0180843b9aca008507e01dc1178329ff958080b932d16080604052733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad60075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015610063575f80fd5b505f339050805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3503360035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a6101509190610395565b620f424061015e91906103df565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6012600a6101fc9190610395565b620f424061020a91906103df565b604051610217919061042f565b60405180910390a3610448565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156102a65780860481111561028257610281610224565b5b60018516156102915780820291505b808102905061029f85610251565b9450610266565b94509492505050565b5f826102be5760019050610379565b816102cb575f9050610379565b81600181146102e157600281146102eb5761031a565b6001915050610379565b60ff8411156102fd576102fc610224565b5b8360020a91508482111561031457610313610224565b5b50610379565b5060208310610133831016604e8410600b841016171561034f5782820a90508381111561034a57610349610224565b5b610379565b61035c848484600161025d565b9250905081840481111561037357610372610224565b5b81810290505b9392505050565b5f819050919050565b5f60ff82169050919050565b5f61039f82610380565b91506103aa83610389565b92506103d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846102af565b905092915050565b5f6103e982610380565b91506103f483610380565b925082820261040281610380565b9150828204841483151761041957610418610224565b5b5092915050565b61042981610380565b82525050565b5f6020820190506104425f830184610420565b92915050565b612e7c806104555f395ff3fe6080604052600436106100e0575f3560e01c80638da5cb5b1161007e578063b15be2f511610058578063b15be2f514610acb578063c59f233e14610ae1578063dd62ed3e14610aeb578063de5a265d14610b27576107e8565b80638da5cb5b14610a3b57806395d89b4114610a65578063a9059cbb14610a8f576107e8565b806318160ddd116100ba57806318160ddd1461096f57806323b872dd14610999578063313ce567146109d557806370a08231146109ff576107e8565b806306fdde03146108e1578063095ea7b31461090b5780630b53170f14610947576107e8565b366107e85760035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036107e65760013403156107e557600234036101b45760035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f193505050501580156101ae573d5f803e3d5ffd5b506107e4565b5f60015f8073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f620493e2610203610b4f565b61020d9190611e02565b90508060015f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461027c9190611e43565b925050819055505f8060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156102ef573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103139190611f03565b50915091505f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610383573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103a79190611fad565b90505f803073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105de5760045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610448573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061046c9190611fad565b915060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663054d50d487876dffffffffffffffffffffffffffff16876dffffffffffffffffffffffffffff166040518463ffffffff1660e01b81526004016104ec93929190611fe7565b602060405180830381865afa158015610507573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052b9190612046565b905060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f5f8360035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b81526004016105ac93929190612138565b5f604051808303815f87803b1580156105c3575f80fd5b505af11580156105d5573d5f803e3d5ffd5b505050506107dd565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610648573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061066c9190611fad565b925030915060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663054d50d487866dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff166040518463ffffffff1660e01b81526004016106ef93929190611fe7565b602060405180830381865afa15801561070a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061072e9190612046565b905060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f825f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b81526004016107af93929190612180565b5f604051808303815f87803b1580156107c6575f80fd5b505af11580156107d8573d5f803e3d5ffd5b505050505b5050505050505b5b5b005b3480156107f3575f80fd5b505f43146108df5760035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036108de575f803681019061085f91906121dc565b50905060018082610870919061221a565b61087a9190611e43565b60015f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5b005b3480156108ec575f80fd5b506108f5610b71565b60405161090291906122bd565b60405180910390f35b348015610916575f80fd5b50610931600480360381019061092c91906122f1565b610bae565b60405161093e9190612349565b60405180910390f35b348015610952575f80fd5b5061096d60048036038101906109689190612562565b610bc4565b005b34801561097a575f80fd5b50610983610b4f565b6040516109909190612606565b60405180910390f35b3480156109a4575f80fd5b506109bf60048036038101906109ba919061261f565b610d66565b6040516109cc9190612349565b60405180910390f35b3480156109e0575f80fd5b506109e9610e0b565b6040516109f6919061268a565b60405180910390f35b348015610a0a575f80fd5b50610a256004803603810190610a2091906126a3565b610e13565b604051610a329190612606565b60405180910390f35b348015610a46575f80fd5b50610a4f610e59565b604051610a5c91906126dd565b60405180910390f35b348015610a70575f80fd5b50610a79610e80565b604051610a8691906122bd565b60405180910390f35b348015610a9a575f80fd5b50610ab56004803603810190610ab091906122f1565b610ebd565b604051610ac29190612349565b60405180910390f35b348015610ad6575f80fd5b50610adf610ed3565b005b610ae961101a565b005b348015610af6575f80fd5b50610b116004803603810190610b0c91906126f6565b611633565b604051610b1e9190612606565b60405180910390f35b348015610b32575f80fd5b50610b4d6004803603810190610b489190612562565b6116b5565b005b5f6012600a610b5e9190612863565b620f4240610b6c9190611e02565b905090565b60606040518060400160405280600781526020017f4d65777468657200000000000000000000000000000000000000000000000000815250905090565b5f610bba338484611896565b6001905092915050565b3373ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c48906128f7565b60405180910390fd5b8051825114610c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8c9061295f565b60405180910390fd5b5f5b8251811015610d6057828181518110610cb357610cb261297d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16848281518110610ce457610ce361297d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef848481518110610d3657610d3561297d565b5b6020026020010151604051610d4b9190612606565b60405180910390a38080600101915050610c97565b50505050565b5f610d72848484611a59565b610e0084338460025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610dfb919061221a565b611896565b600190509392505050565b5f6012905090565b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606040518060400160405280600381526020017f4d45570000000000000000000000000000000000000000000000000000000000815250905090565b5f610ec9338484611a59565b6001905092915050565b3373ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f57906128f7565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b3373ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109e906128f7565b60405180910390fd5b737a250d5630b4cf539739df2c5dacb4c659f2488d60045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111283060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff165f19611896565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611192573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b69190611fad565b73ffffffffffffffffffffffffffffffffffffffff1663c9c653963060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561123c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112609190611fad565b6040518363ffffffff1660e01b815260040161127d9291906129aa565b6020604051808303815f875af1158015611299573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112bd9190611fad565b60065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d719473061134430610e13565b5f80305f196040518863ffffffff1660e01b815260040161136a969594939291906129d1565b60606040518083038185885af1158015611386573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906113ab9190612a30565b50505060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161146a91906126dd565b602060405180830381865afa158015611485573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114a99190612046565b90505f6103e86103cf836114bd9190611e02565b6114c79190612aad565b905060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb5f836040518363ffffffff1660e01b8152600401611525929190612add565b6020604051808303815f875af1158015611541573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115659190612b2e565b5060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683856115d1919061221a565b6040518363ffffffff1660e01b81526004016115ee929190612b59565b6020604051808303815f875af115801561160a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061162e9190612b2e565b505050565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b3373ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611742576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611739906128f7565b60405180910390fd5b8051825114611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d9061295f565b60405180910390fd5b5f5b8251811015611890576117d0338483815181106117a8576117a761297d565b5b60200260200101518484815181106117c3576117c261297d565b5b6020026020010151611a59565b8281815181106117e3576117e261297d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168482815181106118145761181361297d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8484815181106118665761186561297d565b5b602002602001015160405161187b9190612606565b60405180910390a38080600101915050611788565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb90612bf0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196990612c7e565b60405180910390fd5b8060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611a4c9190612606565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe90612d0c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90612d9a565b60405180910390fd5b5f8111611b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6e90612e28565b60405180910390fd5b60014710611cbc573073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611c05575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80611c5c575060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80611cb3575060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b611cbb575f80fd5b5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611d08919061221a565b925050819055508060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611d5b9190611e43565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611dbf9190612606565b60405180910390a3505050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611e0c82611dcc565b9150611e1783611dcc565b9250828202611e2581611dcc565b91508282048414831517611e3c57611e3b611dd5565b5b5092915050565b5f611e4d82611dcc565b9150611e5883611dcc565b9250828201905080821115611e7057611e6f611dd5565b5b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f6dffffffffffffffffffffffffffff82169050919050565b611ea981611e87565b8114611eb3575f80fd5b50565b5f81519050611ec481611ea0565b92915050565b5f63ffffffff82169050919050565b611ee281611eca565b8114611eec575f80fd5b50565b5f81519050611efd81611ed9565b92915050565b5f805f60608486031215611f1a57611f19611e7f565b5b5f611f2786828701611eb6565b9350506020611f3886828701611eb6565b9250506040611f4986828701611eef565b9150509250925092565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611f7c82611f53565b9050919050565b611f8c81611f72565b8114611f96575f80fd5b50565b5f81519050611fa781611f83565b92915050565b5f60208284031215611fc257611fc1611e7f565b5b5f611fcf84828501611f99565b91505092915050565b611fe181611dcc565b82525050565b5f606082019050611ffa5f830186611fd8565b6120076020830185611fd8565b6120146040830184611fd8565b949350505050565b61202581611dcc565b811461202f575f80fd5b50565b5f815190506120408161201c565b92915050565b5f6020828403121561205b5761205a611e7f565b5b5f61206884828501612032565b91505092915050565b5f819050919050565b5f819050919050565b5f61209d61209861209384612071565b61207a565b611dcc565b9050919050565b6120ad81612083565b82525050565b5f6120cd6120c86120c384611f53565b61207a565b611f53565b9050919050565b5f6120de826120b3565b9050919050565b5f6120ef826120d4565b9050919050565b6120ff816120e5565b82525050565b5f82825260208201905092915050565b50565b5f6121235f83612105565b915061212e82612115565b5f82019050919050565b5f60808201905061214b5f8301866120a4565b6121586020830185611fd8565b61216560408301846120f6565b818103606083015261217681612118565b9050949350505050565b5f6080820190506121935f830186611fd8565b6121a060208301856120a4565b6121ad60408301846120f6565b81810360608301526121be81612118565b9050949350505050565b5f813590506121d68161201c565b92915050565b5f80604083850312156121f2576121f1611e7f565b5b5f6121ff858286016121c8565b9250506020612210858286016121c8565b9150509250929050565b5f61222482611dcc565b915061222f83611dcc565b925082820390508181111561224757612246611dd5565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61228f8261224d565b6122998185612257565b93506122a9818560208601612267565b6122b281612275565b840191505092915050565b5f6020820190508181035f8301526122d58184612285565b905092915050565b5f813590506122eb81611f83565b92915050565b5f806040838503121561230757612306611e7f565b5b5f612314858286016122dd565b9250506020612325858286016121c8565b9150509250929050565b5f8115159050919050565b6123438161232f565b82525050565b5f60208201905061235c5f83018461233a565b92915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61239c82612275565b810181811067ffffffffffffffff821117156123bb576123ba612366565b5b80604052505050565b5f6123cd611e76565b90506123d98282612393565b919050565b5f67ffffffffffffffff8211156123f8576123f7612366565b5b602082029050602081019050919050565b5f80fd5b5f61241f61241a846123de565b6123c4565b9050808382526020820190506020840283018581111561244257612441612409565b5b835b8181101561246b578061245788826122dd565b845260208401935050602081019050612444565b5050509392505050565b5f82601f83011261248957612488612362565b5b813561249984826020860161240d565b91505092915050565b5f67ffffffffffffffff8211156124bc576124bb612366565b5b602082029050602081019050919050565b5f6124df6124da846124a2565b6123c4565b9050808382526020820190506020840283018581111561250257612501612409565b5b835b8181101561252b578061251788826121c8565b845260208401935050602081019050612504565b5050509392505050565b5f82601f83011261254957612548612362565b5b81356125598482602086016124cd565b91505092915050565b5f805f6060848603121561257957612578611e7f565b5b5f84013567ffffffffffffffff81111561259657612595611e83565b5b6125a286828701612475565b935050602084013567ffffffffffffffff8111156125c3576125c2611e83565b5b6125cf86828701612475565b925050604084013567ffffffffffffffff8111156125f0576125ef611e83565b5b6125fc86828701612535565b9150509250925092565b5f6020820190506126195f830184611fd8565b92915050565b5f805f6060848603121561263657612635611e7f565b5b5f612643868287016122dd565b9350506020612654868287016122dd565b9250506040612665868287016121c8565b9150509250925092565b5f60ff82169050919050565b6126848161266f565b82525050565b5f60208201905061269d5f83018461267b565b92915050565b5f602082840312156126b8576126b7611e7f565b5b5f6126c5848285016122dd565b91505092915050565b6126d781611f72565b82525050565b5f6020820190506126f05f8301846126ce565b92915050565b5f806040838503121561270c5761270b611e7f565b5b5f612719858286016122dd565b925050602061272a858286016122dd565b9150509250929050565b5f8160011c9050919050565b5f808291508390505b60018511156127895780860481111561276557612764611dd5565b5b60018516156127745780820291505b808102905061278285612734565b9450612749565b94509492505050565b5f826127a1576001905061285c565b816127ae575f905061285c565b81600181146127c457600281146127ce576127fd565b600191505061285c565b60ff8411156127e0576127df611dd5565b5b8360020a9150848211156127f7576127f6611dd5565b5b5061285c565b5060208310610133831016604e8410600b84101617156128325782820a90508381111561282d5761282c611dd5565b5b61285c565b61283f8484846001612740565b9250905081840481111561285657612855611dd5565b5b81810290505b9392505050565b5f61286d82611dcc565b91506128788361266f565b92506128a57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612792565b905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6128e1602083612257565b91506128ec826128ad565b602082019050919050565b5f6020820190508181035f83015261290e816128d5565b9050919050565b7f646f6e74206d61746368000000000000000000000000000000000000000000005f82015250565b5f612949600a83612257565b915061295482612915565b602082019050919050565b5f6020820190508181035f8301526129768161293d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6040820190506129bd5f8301856126ce565b6129ca60208301846126ce565b9392505050565b5f60c0820190506129e45f8301896126ce565b6129f16020830188611fd8565b6129fe60408301876120a4565b612a0b60608301866120a4565b612a1860808301856126ce565b612a2560a0830184611fd8565b979650505050505050565b5f805f60608486031215612a4757612a46611e7f565b5b5f612a5486828701612032565b9350506020612a6586828701612032565b9250506040612a7686828701612032565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612ab782611dcc565b9150612ac283611dcc565b925082612ad257612ad1612a80565b5b828204905092915050565b5f604082019050612af05f8301856126ce565b612afd6020830184611fd8565b9392505050565b612b0d8161232f565b8114612b17575f80fd5b50565b5f81519050612b2881612b04565b92915050565b5f60208284031215612b4357612b42611e7f565b5b5f612b5084828501612b1a565b91505092915050565b5f604082019050612b6c5f8301856120f6565b612b796020830184611fd8565b9392505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f612bda602483612257565b9150612be582612b80565b604082019050919050565b5f6020820190508181035f830152612c0781612bce565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f612c68602283612257565b9150612c7382612c0e565b604082019050919050565b5f6020820190508181035f830152612c9581612c5c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f612cf6602583612257565b9150612d0182612c9c565b604082019050919050565b5f6020820190508181035f830152612d2381612cea565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f612d84602383612257565b9150612d8f82612d2a565b604082019050919050565b5f6020820190508181035f830152612db181612d78565b9050919050565b7f5472616e7366657220616d6f756e74206d7573742062652067726561746572205f8201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b5f612e12602983612257565b9150612e1d82612db8565b604082019050919050565b5f6020820190508181035f830152612e3f81612e06565b905091905056fea26469706673582212209fd9ece34c274b5f7c93ded32ba82785bd2d2c2228a63436a41b33ced0f9e31f64736f6c634300081a0033c001a0af7600034265637f0d97e02b1f7be832b99eb3ce583953043f3cf0c477a0be86a053531ebc1dc8a38d0a05e14aae29c32045020c0628988380647999f1ae818df3")
// 	// transaction := seleneCommon.Transaction{
// 	// 	From: "",
// 	// 	Nonce: ,
// 	// }
// 	// data, err := json.Marshal(transaction)
// 	hash, err := rpc.SendRawTransaction(&data)

// 	fmt.Println("Hash: ", hash)
// 	assert.NoError(t, err, "Found Error")
// }

func TestGetTransactionReceipt(t *testing.T) {
	rpc := MakeNewRpc(t)
	txHash, _ := utils.Hex_str_to_bytes("0x4bc11033063e445e038e52e72266f5054845d3879704d0cf38bedeb86c924cec")

	_, err := rpc.GetTransactionReceipt((*common.Hash)(txHash))
	// expectedReceipt := types.Receipt{}

	assert.NoError(t, err, "Found Error")
	// assert.Equal(t, expectedReceipt ,txnReceipt, "Receipt didn't match")
}

func TestGetTransaction(t *testing.T) {
	rpc := MakeNewRpc(t)
	txHash, _ := utils.Hex_str_to_bytes("0x4bc11033063e445e038e52e72266f5054845d3879704d0cf38bedeb86c924cec")

	_, err := rpc.GetTransaction((*common.Hash)(txHash))
	// expectedTxn := seleneCommon.Transaction{}
	// fmt.Println("Transaction: ", txn)

	assert.NoError(t, err, "Found Error")
	// assert.Equal(t, 1,2,"")
	// assert.Equal(t, expectedTxn ,txn, "Receipt didn't match")
}

func TestGetLogs(t *testing.T) {
	rpc := MakeNewRpc(t)
	address := common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2")
	blockHash := common.HexToHash("0x945b6b3568c39736fe1595234f0529efc8d64930a5343196aa8ef799b02dd609")

	filterQuery := ethereum.FilterQuery{
		Addresses: []common.Address{address},
		BlockHash: &blockHash,
	}

	_, err := rpc.GetLogs(&filterQuery)
	// expectedLogs := []types.Log{}
	fmt.Println("")
	assert.NoError(t, err, "Found Error")
	// assert.Equal(t, expectedLogs, logs, "Logs didn't match")
}

func TestGetChainId(t *testing.T) {
	rpc := MakeNewRpc(t)

	chainId, err := rpc.ChainId()

	fmt.Print("")
	uint256.NewInt(0)
	_ = types.Log{}

	assert.NoError(t, err, "Found Error")
	assert.Equal(t, chainId, uint64(1), "Expected chain Id to be 1")
}

func TestGetNewFilter(t *testing.T) {
	rpc := MakeNewRpc(t)
	address := common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2")
	blockHash := common.HexToHash("0x945b6b3568c39736fe1595234f0529efc8d64930a5343196aa8ef799b02dd609")

	filterQuery := ethereum.FilterQuery{
		Addresses: []common.Address{address},
		BlockHash: &blockHash,
		FromBlock: big.NewInt(200000000),
	}

	_, err := rpc.GetNewFilter(&filterQuery)

	assert.NoError(t, err, "Found Error")
	// assert.Equal(t, *uint256.MustFromHex("0x35ef5ae2a28c50b0a6a8fd0903c99e7f"), filterId, "Filter Id doesn't match")
}

func TestGetFilterChanges(t *testing.T) {
	rpc := MakeNewRpc(t)

	address := common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2")
	blockHash := common.HexToHash("0x945b6b3568c39736fe1595234f0529efc8d64930a5343196aa8ef799b02dd609")

	filterQuery := ethereum.FilterQuery{
		Addresses: []common.Address{address},
		BlockHash: &blockHash,
		FromBlock: big.NewInt(200000000),
	}

	filterId, err := rpc.GetNewFilter(&filterQuery)

	logs, err := rpc.GetFilterChanges(&filterId)
	expectedLogs := []types.Log{}
	assert.NoError(t, err, "Found Error")
	assert.Equal(t, expectedLogs, logs, "Logs didn't match")
}

func TestUninstallFilter(t *testing.T) {
	rpc := MakeNewRpc(t)

	address := common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2")
	blockHash := common.HexToHash("0x945b6b3568c39736fe1595234f0529efc8d64930a5343196aa8ef799b02dd609")

	filterQuery := ethereum.FilterQuery{
		Addresses: []common.Address{address},
		BlockHash: &blockHash,
		FromBlock: big.NewInt(200000000),
	}

	filterId, err := rpc.GetNewFilter(&filterQuery)

	success, err := rpc.UninstallFilter(&filterId)

	assert.NoError(t, err, "Found Error")
	assert.Equal(t, true, success, "Success didn't match")

	//Check whether the filter still exists
	_, err = rpc.GetFilterChanges(&filterId)
	assert.Error(t, err, "Found Error")
}

func TestGetNewBlockFilter(t *testing.T) {
	rpc := MakeNewRpc(t)

	_, err := rpc.GetNewBlockFilter()

	assert.NoError(t, err, "Found Error")
	// assert.Equal(t, 0, filterId, "Filter ID not equal")
	// _, err = rpc.GetFilterChanges(&filterId)
	// assert.NoError(t, err, "Found Error")
}

func TestGetNewPendingTransactionFilter(t *testing.T) {
	rpc := MakeNewRpc(t)

	_, err := rpc.GetNewPendingTransactionFilter()

	assert.NoError(t, err, "Found Error")
}

func TestGetFeeHistory(t *testing.T) {
	rpc := MakeNewRpc(t)
	blockCount := uint64(5)
	lastBlock := uint64(20000000)
	rewardPercentiles := []float64{10, 40, 90}
	_, err := rpc.GetFeeHistory(blockCount, lastBlock, &rewardPercentiles)

	assert.NoError(t, err, "Found Error")
	// assert.Equal(t, FeeHistory{}, feeHistory, "Fee History does not match")
}
